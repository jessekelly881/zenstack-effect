//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator js {
  provider = "prisma-client-js"
}

enum LanguageSpokenAs {
  PRIMARY
  OFFICIAL
  OFTEN
}

enum CardType {
  RELATED_GROUP
  SYNONYMOUS
  LEXICALLY_SIMILAR
  MINIMAL_PAIRS
}

enum WordIdentificationMethod {
  STANDARD
  DICTIONARY
}

enum MetaCardType {
  FOREIGN_FIRST
  FOREIGN_LAST
  LISTENING
  PRONUNCIATION
  DRAG_AND_DROP
}

enum PluralitySystem {
  SINGULAR_PLURAL
  SINGULAR_DUAL_PLURAL
  NONE
}

enum GenderSystem {
  GENDERED
  NON_GENDERED
  NATURAL_GENDER
}

enum VerbAspect {
  EXTENSIVE
  LIMITED
  NONE
}

enum WritingSystem {
  ALPHABET
  SYLLABARY
  LOGOGRAPHIC
  ABJAD
  ABUGIDA
}

enum WordOrder {
  SOV
  SVO
  VSO
  VOS
  OVS
  OSV
  FREE
}

enum CaseSystem {
  NOMINATIVE_ACCUSATIVE
  ERGATIVE_ABSOLUTIVE
  TRI_PARTITE
  NONE
}

enum LanguageLevel {
  A1
  A2
  B1
  B2
  C1
  C2
}

enum UserStreakMode {
  MANUAL
  FROZEN
}

enum ArticleSystem {
  NO_ARTICLES
  GENDERED_DEFINITE_ARTICLES
  NON_GENDERED_DEFINITE_ARTICLE
  DEFINITE_SUFFIXES
  NO_INDEFINITE_ARTICLES
  INDEFINITE_SUFFIXES
}

enum VerbConjugation {
  SUBJECT_VERB_AGREEMENT
  NO_CONJUGATION
  AGGLUTINATIVE_CONJUGATION
  ASPECT_FOCUSED_CONJUGATION
  POSTPOSITIONAL_CONJUGATION
  INFLECTIONAL_COMPLEXITY
}

enum WordUsageType {
  HOMONYM
  HOMOGRAPH
  POLYSEME
  HETERONYM
  UNIVOCAL
}

enum PartOfSpeechBasic {
  NOUN
  PRONOUN
  ADJECTIVE
  VERB
  ADVERB
  PREPOSITION
  CONJUNCTION
  INTERJECTION
  DETERMINER
  ARTICLE
  PARTICLE
}

enum TTSProviders {
  ELEVENLABS
}

enum PartOfSpeechSpecific {
  INTERROGATIVE_ADJECTIVE
  RELATIVE_ADJECTIVE
  DEMONSTRATIVE_ADJECTIVE
  POSSESSIVE_ADJECTIVE
  INDEFINITE_ADJECTIVE
  EXCLAMATIVE_ADJECTIVE
  QUALITATIVE_ADJECTIVE
  QUANTITATIVE_ADJECTIVE
  COMPARATIVE_ADJECTIVE
  SUPERLATIVE_ADJECTIVE
  COMMON_NOUN
  PROPER_NOUN
  ABSTRACT_NOUN
  CONCRETE_NOUN
  COLLECTIVE_NOUN
  COUNTABLE_NOUN
  UNCOUNTABLE_NOUN
  COMPOUND_NOUN
  PLURAL_NOUN
  SINGULAR_NOUN
  PERSONAL_PRONOUN
  DEMONSTRATIVE_PRONOUN
  INTERROGATIVE_PRONOUN
  RELATIVE_PRONOUN
  REFLEXIVE_PRONOUN
  INTENSIVE_PRONOUN
  RECIPROCAL_PRONOUN
  INDEFINITE_PRONOUN
  POSSESSIVE_PRONOUN
  ACTION_VERB
  LINKING_VERB
  AUXILIARY_VERB
  MODAL_VERB
  TRANSITIVE_VERB
  INTRANSITIVE_VERB
  REGULAR_VERB
  IRREGULAR_VERB
  FINITE_VERB
  NON_FINITE_VERB
  ADVERB_OF_MANNER
  ADVERB_OF_TIME
  ADVERB_OF_PLACE
  ADVERB_OF_FREQUENCY
  ADVERB_OF_DEGREE
  INTERROGATIVE_ADVERB
  RELATIVE_ADVERB
  CONJUNCTIVE_ADVERB
  PREPOSITION_OF_TIME
  PREPOSITION_OF_PLACE
  PREPOSITION_OF_DIRECTION
  PREPOSITION_OF_AGENT
  PREPOSITION_OF_INSTRUMENT
  PREPOSITION_OF_MANNER
  COMPOUND_PREPOSITION
  PARTICIPLE_PREPOSITION
  PHRASE_PREPOSITION
  COORDINATING_CONJUNCTION
  SUBORDINATING_CONJUNCTION
  CORRELATIVE_CONJUNCTION
  PRIMARY_INTERJECTION
  SECONDARY_INTERJECTION
}

enum ColorMode {
  DARK
  LIGHT
  SYSTEM
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum SpecialCharacterType {
  PUNCTUATION
  SYMBOL
  LETTER
}

enum DefinitionCalloutType {
  FUN_FACT
  RUDE
  OVERLY_FORMAL
  SILLY
  REMINDER
}

enum LexicalItemType {
  PHRASE
  WORD
  QUESTION
  SENTENCE
}

enum SubmissionResult {
  UNABLE
  SKIPPED_INCORRECT
  INCORRECT
  CORRECT
}

enum ResponseMethod {
  SELECTING
  BLOCKS_OR_TYPING
  SPEAKING
  PAIRING
}

enum UserSubmissionType {
  CANT_SPEAK
  CANT_LISTEN
  SKIPPED
  SUBMITTED
}

enum LessonPerformanceType {
  FIRST_TIME
  REPEAT
  REVIEW
}

enum UserChosenResponseDifficulty {
  EASY
  MODERATE
  HARD
}

enum ImageGenerationProvider {
  DALLE_3
  STABLE_DIFFUSION
  RECRAFT
}

enum ImageFormat {
  PNG
  JPG
  WEBP
  SVG
}

model User {
  id                    String                 @id() @default(cuid())
  email                 String?                @unique()
  emailVerified         DateTime?
  name                  String?
  image                 String?
  isOnboarding          Boolean                @default(true)
  studiedLanguages      StudiedLanguage[]
  streakDays            UserStreakDay[]
  streak                Int                    @default(0)
  muteAudio             Boolean                @default(false)
  animations            Boolean                @default(false)
  makeTypingEasier      Boolean                @default(false)
  allowPromo            Boolean                @default(false)
  motivationalMessages  Boolean                @default(false)
  colorMode             ColorMode              @default(LIGHT)
  streakXpRequired      Int                    @default(100)
  lessonPerformances    LessonPerformance[]
  audioTranscripts      AudioTranscript[]
  sessions              Session[]
  accounts              Account[]
  localeCode            String                 @default("en")
  lessonQuestionReports LessonQuestionReport[]
  metaCardPerformance   MetaCardPerformance[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt()
}

model UserStreakDay {
  id         String         @id() @default(cuid())
  mode       UserStreakMode @default(MANUAL)
  date       DateTime       @db.Date()
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  xpRequired Int
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt()

  @@unique([userId, date])
}

model StudiedLanguage {
  id                String        @id() @default(cuid())
  userId            String
  languageCode      String
  learningGoalId    String?
  localeCode        String        @default("en")
  tookPlacementTest Boolean       @default(false)
  xpGained          Int           @default(0)
  speakingExp       Int           @default(0)
  listeningExp      Int           @default(0)
  grammarExp        Int           @default(0)
  vocabularyExp     Int           @default(0)
  lastAccessed      DateTime      @default(now())
  learningGoal      LearningGoal? @relation(fields: [learningGoalId], references: [id])
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  language          Language      @relation(fields: [languageCode], references: [code])
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt()

  @@unique([userId, languageCode, localeCode])
}

model Tree {
  id              String     @id() @default(cuid())
  step            Int        @default(0)
  label           String
  description     String
  emoji           String
  fontAwesomeIcon String     @default("")
  color           String
  localeCode      String     @default("en")
  languageCode    String
  treeNodes       TreeNode[]
  language        Language   @relation(fields: [languageCode], references: [code])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt()

  @@unique([label, localeCode, languageCode])
}

model TreeNode {
  id              String     @id() @default(cuid())
  label           String
  description     String
  emoji           String
  fontAwesomeIcon String     @default("")
  color           String
  treeId          String
  lessons         Lesson[]
  tree            Tree       @relation(fields: [treeId], references: [id], onDelete: Cascade)
  metaCards       MetaCard[]
  siblings        TreeNode[] @relation("TreeNodeSiblings")
  siblingOf       TreeNode[] @relation("TreeNodeSiblings")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt()

  @@unique([label, treeId])
}

model MetaCardPerformance {
  id                           String                       @id() @default(cuid())
  userId                       String
  lessonPerformanceId          String
  accuracy                     Int
  userResponseText             String
  submissionType               UserSubmissionType
  submissionResult             SubmissionResult
  userChosenResponseDifficulty UserChosenResponseDifficulty
  metaCardId                   String
  metaCard                     MetaCard                     @relation(fields: [metaCardId], references: [id])
  lessonPerformance            LessonPerformance            @relation(fields: [lessonPerformanceId], references: [id])
  user                         User                         @relation(fields: [userId], references: [id])
  createdAt                    DateTime                     @default(now())
  updatedAt                    DateTime                     @updatedAt()
}

model Lesson {
  id                 String              @id() @default(cuid())
  step               Int                 @default(0)
  treeNodeId         String
  metaCards          MetaCard[]
  treeNode           TreeNode            @relation(fields: [treeNodeId], references: [id], onDelete: Cascade)
  lessonPerformances LessonPerformance[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt()

  @@unique([step, treeNodeId])
}

model LessonPerformance {
  id                   String                @id() @default(cuid())
  accuracy             Int                   @default(0)
  xpGained             Int                   @default(0)
  type                 LessonPerformanceType @default(FIRST_TIME)
  userId               String
  lessonId             String
  metaCardPerformances MetaCardPerformance[]
  lesson               Lesson                @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt()
}

model Account {
  id                String   @id() @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text()
  access_token      String?  @db.Text()
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text()
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id() @default(cuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique()
  expires    DateTime

  @@unique([identifier, token])
}

model LessonQuestionReport {
  id         String    @id() @default(cuid())
  metaCardId String
  userId     String
  reason     String
  metaCard   MetaCard? @relation(fields: [metaCardId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt()
}

model Language {
  code                      String                   @id()
  englishLabel              String
  foreignLabel              String
  emoji                     String
  color                     String                   @default("#000000")
  isNew                     Boolean
  supportsAudioGeneration   Boolean
  supportsSiri              Boolean
  relatedLanguages          String[]
  origin                    String                   @default("")
  nativeSpeakers            Int                      @default(0)
  secondarySpeakers         Int                      @default(0)
  representativeCountryCode String?
  representativeCountry     Country?                 @relation(fields: [representativeCountryCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
  tonal                     Boolean
  isRtl                     Boolean
  caseSensitive             Boolean
  writingSystem             WritingSystem
  articleSystem             ArticleSystem
  conjugationSystem         VerbConjugation
  wordIdentificationMethod  WordIdentificationMethod
  wordOrder                 WordOrder
  verbAspect                VerbAspect
  caseSystem                CaseSystem
  genderSystem              GenderSystem
  pluralitySystem           PluralitySystem
  lexicalItems              LexicalItem[]
  numOfLearners             Int                      @default(0)
  specialCharacters         String[]
  specialPunctuation        String[]
  grammaticalNotes          String[]
  phoneticNotes             String[]
  lexicalNotes              String[]
  translationGroups         TranslationGroup[]
  translations              Translation[]
  articleCategory           ArticleCategory[]
  article                   Article[]
  trees                     Tree[]
  cards                     Card[]
  studiedLanguages          StudiedLanguage[]
  spokenIn                  LanguageSpokenIn[]
  audioGenerations          AudioGeneration[]
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt()
}

model Country {
  code                 String             @id()
  officialName         String
  label                String
  alpha3               String             @unique()
  numericalCountryCode Int                @unique()
  region               String?
  subRegion            String?
  intermediateRegion   String?
  represents           Language[]
  languageSpokenIn     LanguageSpokenIn[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt()
}

model LanguageSpokenIn {
  id           String           @id() @default(cuid())
  languageCode String
  countryCode  String
  type         LanguageSpokenAs
  country      Country          @relation(fields: [countryCode], references: [code])
  language     Language         @relation(fields: [languageCode], references: [code])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt()
}

model GeneratedImage {
  id           String                  @id() @default(cuid())
  prompt       String
  url          String
  provider     ImageGenerationProvider
  format       ImageFormat
  lexicalItems LexicalItem[]
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt()
}

model LexicalItem {
  id                 String           @id() @default(cuid())
  type               LexicalItemType
  foreignBase        String
  base               Translation[]
  definitions        Definition[]
  tags               Tag[]
  cards              Card[]
  usageType          WordUsageType?
  languageCode       String
  language           Language         @relation(fields: [languageCode], references: [code], onDelete: Cascade)
  images             GeneratedImage[]
  correctSolutionFor MetaCard[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt()

  @@unique([foreignBase, languageCode])
}

model MetaCard {
  id                    String                 @id() @default(cuid())
  type                  MetaCardType
  cardId                String
  card                  Card                   @relation(fields: [cardId], references: [id], onDelete: Cascade)
  lessonQuestionReports LessonQuestionReport[]
  lesson                Lesson[]
  treeNodes             TreeNode[]
  history               MetaCardPerformance[]
  correctSolutionId     String
  correctSolution       LexicalItem            @relation(fields: [correctSolutionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt()

  @@unique([cardId, type, correctSolutionId])
}

model Definition {
  id                   String                @id() @default(cuid())
  foreign              String
  definition           String
  englishTranslation   String                @default("")
  examples             TranslationGroup[]    @relation(name: "DefinitionExamples")
  synonyms             TranslationGroup[]    @relation(name: "DefinitionSynonyms")
  variations           TranslationGroup[]    @relation(name: "DefinitionVariations")
  partOfSpeechBasic    PartOfSpeechBasic?
  partOfSpeechSpecific PartOfSpeechSpecific?
  withArticle          Translation[]         @relation(name: "DefinitionArticle")
  withTypicalUsage     Translation[]         @relation(name: "DefinitionTypical")
  lexicalItemId        String
  lexicalItem          LexicalItem           @relation(fields: [lexicalItemId], references: [id], onDelete: Cascade)
  callouts             DefinitionCallout[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt()
}

model DefinitionCallout {
  id                 String                @id() @default(cuid())
  type               DefinitionCalloutType
  definitionId       String
  definition         Definition            @relation(fields: [definitionId], references: [id])
  englishTitle       String
  englishDescription String
  foreignTitle       String
  foreignDescription String
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt()
}

model TranslationGroup {
  id                   String         @id() @default(cuid())
  localeCode           String         @default("en")
  translations         Translation[]
  isExampleGroup       Boolean        @default(false)
  languages            Language[]
  definitionExamples   Definition[]   @relation(name: "DefinitionExamples")
  definitionSynonyms   Definition[]   @relation(name: "DefinitionSynonyms")
  definitionVariations Definition[]   @relation(name: "DefinitionVariations")
  learningGoalExamples LearningGoal[] @relation(name: "LearningGoalExamples")
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt()
}

model Translation {
  id                   String             @id() @default(cuid())
  foreign              String
  foreignExample       String             @default("")
  englishContext       String             @default("")
  translation          String
  transliteration      String?
  ipa                  String?
  literalTranslation   String?
  foreignInformation   String?
  localizedInformation String?
  hidden               Boolean            @default(false)
  localeCode           String             @default("en")
  languageCode         String
  language             Language           @relation(fields: [languageCode], references: [code])
  lexicalItems         LexicalItem[]
  translationGroups    TranslationGroup[]
  definitionArticles   Definition[]       @relation(name: "DefinitionArticle")
  definitionTypical    Definition[]       @relation(name: "DefinitionTypical")
  audioGenerations     AudioGeneration[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt()

  @@unique([foreign, englishContext, languageCode, localeCode])
}

model AudioGeneration {
  id              String        @id() @default(cuid())
  url             String
  voiceId         String
  voice           Voice         @relation(fields: [voiceId], references: [id])
  languageCode    String
  language        Language      @relation(fields: [languageCode], references: [code])
  provider        TTSProviders  @default(ELEVENLABS)
  wordStartsMs    Int[]
  wordEndsMs      Int[]
  timestampWords  String[]
  totalDurationMs Int
  translations    Translation[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt()
}

model Voice {
  id               String            @id() @default(cuid())
  name             String
  elevenLabsId     String            @unique()
  gender           Gender
  audioGenerations AudioGeneration[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt()
}

model Card {
  id           String        @id() @default(cuid())
  type         CardType
  languageCode String
  lexicalItems LexicalItem[]
  language     Language      @relation(fields: [languageCode], references: [code], onDelete: Cascade)
  metaCards    MetaCard[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()
}

model Tag {
  name         String        @id()
  emoji        String
  color        String        @default("#000000")
  lexicalItems LexicalItem[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()
}

model AudioTranscript {
  id              String   @id() @default(cuid())
  durationSeconds Int      @default(0)
  results         Json
  userId          String
  audioUrl        String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt()
}

model ArticleCategory {
  id              String    @id() @default(uuid())
  name            String
  slug            String
  color           String    @default("#000000")
  localeCode      String
  languageCode    String
  emoji           String
  fontAwesomeIcon String    @default("")
  language        Language  @relation(fields: [languageCode], references: [code])
  articles        Article[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt()

  @@unique([name, languageCode])
  @@unique([slug, languageCode])
}

model Article {
  id                  String               @id() @default(cuid())
  plainTitle          String
  articleTitle        String
  slug                String
  metaDescription     String
  emoji               String
  fontAwesomeIcon     String               @default("")
  order               Int
  categoryId          String
  category            ArticleCategory      @relation(fields: [categoryId], references: [id])
  contentString       Json
  furtherReadingLinks FurtherReadingLink[]
  languageCode        String
  language            Language             @relation(fields: [languageCode], references: [code])
  publishedAt         DateTime?            @default(now())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt()

  @@unique([slug, languageCode])
}

model FurtherReadingLink {
  id          String   @id() @default(uuid())
  title       String
  url         String
  description String
  articleId   String
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model LearningGoal {
  id               String             @id() @default(cuid())
  level            LanguageLevel      @unique()
  label            String
  notes            String[]
  abilities        String[]
  examples         TranslationGroup[] @relation(name: "LearningGoalExamples")
  studiedLanguages StudiedLanguage[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt()
}

model Locale {
  code      String   @id()
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
